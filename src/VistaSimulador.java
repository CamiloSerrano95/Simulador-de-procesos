
import java.io.File;
import java.io.FileWriter;
import static java.lang.Integer.parseInt;
import java.util.Locale;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author camilo
 */
public class VistaSimulador extends javax.swing.JFrame {

    /**
     * Creates new form VistaSimulador
     */
    
   int Contador;//Contador del total de procesos que se van ingresando
   int ContarLlegada = 0;
   int NProceso;//Carga el número de procesos ejecutándose
   int RafagaProceso = 0;//Carga la ráfaga en ejecución
   int QuantumProceso = 0;//Carga el quantum en ejecución
   int ResiduoRafagaProceso = 0;//Carga el residuo en ejecución
   int TiempoProceso = 0;//Carga el tiempo que se dura procesando
   int ValorBarra;//Carga el progreso de la Barra
   int CantidadProcesos;//Número de procesos terminados
   boolean IterarProceso;
    
    public VistaSimulador() {
        initComponents();
        this.setLocationRelativeTo(null);
        IniciarProceso.setVisible(false);
        PausarProceso.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Quantum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Rafaga = new javax.swing.JTextField();
        AgregarProceso = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaIngresoProceso = new javax.swing.JTable();
        IniciarEjecuacionProcesos = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Caracteres = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        NombreProceso = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        PIDProceso = new javax.swing.JTextField();
        ProgresoProceso = new javax.swing.JTextField();
        BarraProcesoProgreso = new javax.swing.JProgressBar();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        NumerosProcesos = new javax.swing.JTextField();
        TiempoProcesos = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaFinal = new javax.swing.JTable();
        ObtenerGrafica = new javax.swing.JButton();
        IniciarProceso = new javax.swing.JButton();
        PausarProceso = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Quantum");

        jLabel2.setText("Rafaga");

        AgregarProceso.setText("Agregar");
        AgregarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarProcesoActionPerformed(evt);
            }
        });

        jLabel3.setText("Lista de procesos");

        TablaIngresoProceso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Nombre", "T. llegada", "Quantum", "Prioridad", "Rafaga", "R. Rafaga", "Estado", "Caracteres"
            }
        ));
        jScrollPane1.setViewportView(TablaIngresoProceso);

        IniciarEjecuacionProcesos.setText("Iniciar ejecucion");
        IniciarEjecuacionProcesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarEjecuacionProcesosActionPerformed(evt);
            }
        });

        jLabel5.setText("Caracteres");

        Caracteres.setColumns(20);
        Caracteres.setRows(5);
        jScrollPane2.setViewportView(Caracteres);

        jLabel6.setText("Nombre");

        NombreProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreProcesoActionPerformed(evt);
            }
        });

        jLabel7.setText("Proceso");

        jLabel8.setText("Resultados de los procesos");

        jLabel9.setText("Numero de procesos");

        jLabel10.setText("Tiempo de procesos");

        TablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "T. Llegada", "Rafaga", "Quantum", "Tiempo Final", "Estado", "TurnaRound"
            }
        ));
        jScrollPane4.setViewportView(TablaFinal);

        ObtenerGrafica.setText("Obtener Grafica");
        ObtenerGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObtenerGraficaActionPerformed(evt);
            }
        });

        IniciarProceso.setText("Iniciar proceso");
        IniciarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarProcesoActionPerformed(evt);
            }
        });

        PausarProceso.setText("Pausar proceso");
        PausarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PausarProcesoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(Quantum, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(Rafaga, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(NombreProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(AgregarProceso))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(IniciarProceso)
                                .addGap(39, 39, 39)
                                .addComponent(PausarProceso))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NumerosProcesos)
                                    .addComponent(TiempoProcesos, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))))
                        .addContainerGap(386, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ObtenerGrafica)
                                .addGap(346, 346, 346))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(137, 137, 137))))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(IniciarEjecuacionProcesos))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PIDProceso, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(ProgresoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BarraProcesoProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Quantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Rafaga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(NombreProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(NumerosProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(AgregarProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(TiempoProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addComponent(IniciarEjecuacionProcesos)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ObtenerGrafica)
                    .addComponent(IniciarProceso)
                    .addComponent(PausarProceso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PIDProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ProgresoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BarraProcesoProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgregarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarProcesoActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) TablaIngresoProceso.getModel();
        
        Random r = new Random();
        int prio = r.nextInt(3) + 0;
        
        //Obtengo el numero de S de la cadena para asignar la rafaga
        int con = 0;
        String cadena = Caracteres.getText().toLowerCase();
        char[] arrayChar = cadena.toCharArray();
        for (int y = 0; y < arrayChar.length; y++) {

            if (arrayChar[y] == 's') {
                con ++;
            }
        }
        
        int TR = con * 10;
        String TRA = String.valueOf(TR);
        JOptionPane.showMessageDialog(null, "La cadena digitada es"+cadena+" y tiene "+con+" s");
        
        Contador ++;
        
        Object[] Tabla = new Object[9];
        
        Tabla[0] = Contador;
        Tabla[1] = NombreProceso.getText();
        Tabla[2] = ContarLlegada;
        Tabla[3] = Quantum.getText();
        Tabla[4] = prio;
        Tabla[5] = /*TRA;*/ Rafaga.getText();
        Tabla[6] = /*TRA;*/ Rafaga.getText();
        Tabla[7] = "Listo para ejecutar";
        Tabla[8] = Caracteres.getText();
        
        modelo.addRow(Tabla);
        TablaIngresoProceso.setModel(modelo);
        
        
        NombreProceso.setText(null);
        Quantum.setEditable(false);
        Rafaga.setText(null);
        Caracteres.setText(null);
        Rafaga.grabFocus();
     
        JOptionPane.showMessageDialog(null, "La prioridad del proceso es: "+prio);
        TablaIngresoProceso.setRowSorter(new TableRowSorter(modelo));
        ContarLlegada++;
    }//GEN-LAST:event_AgregarProcesoActionPerformed

    private void IniciarEjecuacionProcesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarEjecuacionProcesosActionPerformed
        // TODO add your handling code here:
        new Thread(new Hilo()).start(); //Crea un nuevo hilo
        //IterarProceso = true;
        //IniciarProcesos();
        
        //IniciarEjecuacionProcesos.setVisible(false);
        //IniciarProceso.setVisible(true);
        //PausarProceso.setVisible(true);
    }//GEN-LAST:event_IniciarEjecuacionProcesosActionPerformed

    private void NombreProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreProcesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreProcesoActionPerformed

    private void ObtenerGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObtenerGraficaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo2 = (DefaultTableModel) TablaFinal.getModel();
        int fila = modelo2.getRowCount();
        
        JOptionPane.showMessageDialog(null, fila);
        
        XYSeries series = new XYSeries("Round Robin");
        
        for (int i = 0; i < fila; i++) {
            String IDPro = TablaFinal.getValueAt(i, 0).toString();
            String TurnaRound = TablaFinal.getValueAt(i, 6).toString();

            XYSeriesCollection dataset = new XYSeriesCollection();
            dataset.addSeries(series);
            
            JOptionPane.showMessageDialog(null, "PID Proceso = "+IDPro+" TurnaRound = "+TurnaRound);
            
            int raf = Integer.valueOf(IDPro);
            int TF = Integer.valueOf(TurnaRound);
            
            series.add(raf, TF);        
        }
        
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        
        JFreeChart chart = ChartFactory.createXYLineChart("Proceso vs TurnaRound","PID proceso", "TurnaRound", dataset, PlotOrientation.VERTICAL,false,true, false);
        ChartFrame frame = new ChartFrame("Barra de Procesos", chart);
        frame.pack();
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_ObtenerGraficaActionPerformed

    private void IniciarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarProcesoActionPerformed
        // TODO add your handling code here:
        //IterarProceso = true;
        
    }//GEN-LAST:event_IniciarProcesoActionPerformed

    private void PausarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PausarProcesoActionPerformed
        // TODO add your handling code here:
       IterarProceso = false;
    }//GEN-LAST:event_PausarProcesoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaSimulador().setVisible(true);
            }
        });
    }
    
    private class Hilo implements Runnable { //Objeto de tipo Hilo con extension ejectubale

        @Override
        public void run() {
            int estado = 1; //Estado de while que indica si se puede seguir o no
            int i = 0; // contador de while
                            
            
            while (estado != 0) {
                while (i < Contador) { //Recorrer las filas
                    Montar(i);
                    if (ResiduoRafagaProceso != 0 && ResiduoRafagaProceso > QuantumProceso) { //Ejecutando Procesos
                        for (int c = 1; c <= QuantumProceso; c++) {
                            TablaIngresoProceso.setValueAt("Procesando", i, 7);
                            ResiduoRafagaProceso--;
                            Barra(RafagaProceso, ResiduoRafagaProceso);
                            PintarBarra();
                            TablaIngresoProceso.setValueAt(String.valueOf(ResiduoRafagaProceso), i, 6);
                            TiempoProceso++;
                            EsperarProceso();
                        }
                        TablaIngresoProceso.setValueAt("Espera", i, 7);
                        if (ResiduoRafagaProceso == 0) {
                            CopiarCaracter(i);
                            TablaIngresoProceso.setValueAt("Terminado", i, 7);
                            PintarBarra();
                            Informe(i);
                            Borrar(i);
                            BarraProcesoProgreso.setValue(0);
                        }
                    } else {
                        if (ResiduoRafagaProceso > 0 && QuantumProceso != 0) {
                            while (ResiduoRafagaProceso > 0) {
                                TablaIngresoProceso.setValueAt("Procesando", i, 7);
                                ResiduoRafagaProceso--;
                                Barra(RafagaProceso, ResiduoRafagaProceso);
                                PintarBarra();
                                TablaIngresoProceso.setValueAt(String.valueOf(ResiduoRafagaProceso), i, 6);
                                TiempoProceso++;
                                EsperarProceso();
                            }
                            TablaIngresoProceso.setValueAt("Espera", i, 7);
                            if (ResiduoRafagaProceso == 0 && QuantumProceso != 0) {
                                CopiarCaracter(i);
                                TablaIngresoProceso.setValueAt("Terminado", i, 7);
                                PintarBarra();
                                Informe(i);
                                Borrar(i);
                                BarraProcesoProgreso.setValue(0);
                            }
                        } else {
                            if (ResiduoRafagaProceso == 0 && QuantumProceso != 0) {
                                TablaIngresoProceso.setValueAt("Terminado", i, 7);
                                PintarBarra();
                                Informe(i);
                                Borrar(i);
                                BarraProcesoProgreso.setValue(0);
                            }
                        }
                    }
                    PIDProceso.setText(String.valueOf("")); //Borrar contenido
                    ProgresoProceso.setText(String.valueOf(""));
                    i++;
                }
                i = 0;
                PIDProceso.setText(String.valueOf("")); //Borrar contenido
                ProgresoProceso.setText(String.valueOf(""));
            }
        }
    }

    public void IniciarProcesos() { //Inicia la secuencia de procesos
        jLabel2.setVisible(false);
        jLabel1.setVisible(false);
        Rafaga.setVisible(false);
        Quantum.setVisible(false);
        AgregarProceso.setVisible(false);
        IniciarEjecuacionProcesos.setVisible(false);
    }

    public void Montar(int i) { //Carga los valores de la Tabla

        NProceso = (int) TablaIngresoProceso.getValueAt(i, 0);
        RafagaProceso = parseInt((String) (TablaIngresoProceso.getValueAt(i, 5)));
        QuantumProceso = parseInt((String) (TablaIngresoProceso.getValueAt(i, 3)));
        ResiduoRafagaProceso = parseInt((String) (TablaIngresoProceso.getValueAt(i, 6)));

        if (NProceso > 0) {
            PIDProceso.setText(String.valueOf(NProceso));
        }
    }

    public void Barra(int rafaga, int residuo) { //Calcula porcentaje de la barra y su progreso
        int Rafaga = rafaga;
        int valor = 100 / rafaga;
        int porcentaje = 100 - (valor * residuo);
        ValorBarra = porcentaje;
        ProgresoProceso.setText(String.valueOf(ValorBarra + "%"));
    }

    public void PintarBarra() {
        BarraProcesoProgreso.setValue(ValorBarra);
        BarraProcesoProgreso.repaint();
    }

    public void EsperarProceso() {
        try {
            Thread.sleep(700); //Interrumpe sistema
        } catch (InterruptedException ex) {
            Logger.getLogger(VistaSimulador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Informe(int c) {
        DefaultTableModel modelo2 = (DefaultTableModel) TablaFinal.getModel();
        
        int TiempoLlegadaPro = (int) TablaIngresoProceso.getValueAt(c, 2);
        
        Object[] Tabla = new Object[7];
        Tabla[0] = c + 1;
        Tabla[1] = TablaIngresoProceso.getValueAt(c, 2);
        Tabla[2] = RafagaProceso;
        Tabla[3] = QuantumProceso;
        Tabla[4] = TiempoProceso /*+ " Segundos"*/;
        Tabla[5] = "Terminado";
        Tabla[6] = TiempoProceso - TiempoLlegadaPro;
        modelo2.addRow(Tabla);
        TablaFinal.setModel(modelo2);

        CantidadProcesos++;
        NumerosProcesos.setText(String.valueOf(CantidadProcesos + " Terminados"));
        TiempoProcesos.setText(String.valueOf(TiempoProceso + " Segundos"));
        
        JOptionPane.showMessageDialog(null, "Nombre proceso:" +TablaIngresoProceso.getValueAt(c, 1));
    }

    public void Borrar(int c) { //Elimina los registros de la tabla procesos
        TablaIngresoProceso.setValueAt(0, c, 0);
        TablaIngresoProceso.setValueAt("0", c, 1);
        TablaIngresoProceso.setValueAt("0", c, 2);
        TablaIngresoProceso.setValueAt("0", c, 3);
        TablaIngresoProceso.setValueAt("0", c, 4);
        TablaIngresoProceso.setValueAt("0", c, 5);
        TablaIngresoProceso.setValueAt("******", c, 7);
    }
    
    public void CopiarCaracter(int i) {
        JOptionPane.showMessageDialog(null, "Escribiendo...");

        try {
            //Crear un objeto File que se encargara de crear o abrir acceso a un archivo que se especifica en su constructor
            //File fuente = new File("fuente.txt");
            
            //Crear objeto FileWriter que sera el que nos ayude a escribir sobre archivo
            FileWriter escribir = new FileWriter(i+1+".txt");
            
            //Escribimos en el archivo con el metodo write 
            String cadena = TablaIngresoProceso.getValueAt(i, 8).toString();
            char[] arrayChar = cadena.toCharArray();
            for (int y = 0; y < arrayChar.length; y++) {

                if (arrayChar[y] == 's') {
                    arrayChar[y] = 'x';
                } else if (arrayChar[y] == 'S') {
                    arrayChar[y] = 'X';
                }
                escribir.write(arrayChar[y]);
            }
            
            JOptionPane.showMessageDialog(null, "Escritura finalizada");
            
            //Cerramos la conexion
            escribir.close();
        } catch (Exception e) {
            System.out.println("Error al escribir" + e);
        }
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarProceso;
    private javax.swing.JProgressBar BarraProcesoProgreso;
    private javax.swing.JTextArea Caracteres;
    private javax.swing.JButton IniciarEjecuacionProcesos;
    private javax.swing.JButton IniciarProceso;
    private javax.swing.JTextField NombreProceso;
    private javax.swing.JTextField NumerosProcesos;
    private javax.swing.JButton ObtenerGrafica;
    private javax.swing.JTextField PIDProceso;
    private javax.swing.JButton PausarProceso;
    private javax.swing.JTextField ProgresoProceso;
    private javax.swing.JTextField Quantum;
    private javax.swing.JTextField Rafaga;
    private javax.swing.JTable TablaFinal;
    private javax.swing.JTable TablaIngresoProceso;
    private javax.swing.JTextField TiempoProcesos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
